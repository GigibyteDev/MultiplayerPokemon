@using Microsoft.AspNetCore.Authorization
@using MultiplayerPokemon.Shared.Enums
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@attribute [Authorize]

@if (RoomState.Value is not null)
{
<div class="full-room-wrapper">
    <div class="main-room-wrapper">
        <div class="pokemon-header-body-wrapper">
            <div class="room-header-wrapper">
                <div class="header-items-wrapper">
                    <div class="room-title-wrapper">
                        <h1 class="roomname-display-text">@RoomState.Value.RoomName</h1>
                        <h4 class="username-display-text">Connected As: @UserState.Value?.User.Username</h4>
                    </div>
                    <div class="header-tabs">
                        <div class="header-item @(roomTabToggle ? "selected-header-item" : string.Empty)"
                            @onclick=(ToggleToSearch)>
                            <h3>Pokemon Search</h3>
                        </div>
                        <div class="header-item @(!roomTabToggle ? "selected-header-item" : string.Empty)"
                            @onclick=(ToggleToParty)>
                            <h3>Party</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pokemon-wrapper">
                @if (roomTabToggle)
                {
                    <div class="pokemon-search-wrapper">
                        <div class="pokemon-search-form" @onsubmit="() => HandleGetPokemon()">
                            @if (SearchDataState.Value is not null && SearchDataState.Value.PokemonNames.Any())
                            {
                                <div class="typeahead-search-button-wrapper">
                                    <BlazoredTypeahead 
                                        SearchMethod="SearchPokemon" 
                                        TValue="string" 
                                        TItem="string" 
                                        Value="pokemonId" 
                                        ValueChanged="HandleGetPokemon" 
                                        ValueExpression="@(() => pokemonId)" 
                                        placeholder="Search Pokemon by name or pokedex number..."
                                    >
                                        <SelectedTemplate>
                                            <div class="typeahead-search-wrapper">
                                                @context
                                            </div>
                                        </SelectedTemplate>
                                        <ResultTemplate>
                                            <div class="typeahead-result-wrapper">
                                                @context
                                            </div>
                                        </ResultTemplate>
                                        <NotFoundTemplate>
                                            <div class="typeahead-result-wrapper">
                                                No Pokemon Found!
                                            </div>
                                        </NotFoundTemplate>
                                        </BlazoredTypeahead>
                                        <SearchPokemonButton HandleGetPokemon="HandleGetPokemon" />
                                    </div>
                                }
                                else
                                {
                                    <form class="manual-enter-pokesearch-form" @onsubmit="() => HandleGetPokemon()">
                                        <input type="text" @bind-value="pokemonId" class="manual-enter-pokesearch-input" placeholder="Search Pokemon by name or pokedex number..."></input>
                                        <SearchPokemonButton HandleGetPokemon="HandleGetPokemon" />
                                    </form>
                                }

                            @if (RoomState.Value.SearchedPokemon is not null)
                            {
                                <button type="button" class="submit-button-active" @onclick="HandleAddPokemonToParty">Add To Party</button>
                            }
                            else
                            {
                                <button type="button" class="submit-button">Add To Party</button>
                            }
                            </div>
                        @if (RoomState.Value.SearchedPokemon is not null)
                        {
                            <PokemonData GetPokemon="@HandleGetPokemon" />
                        }
                    </div>
                }
                else
                {
                    <div class="party-stats-wrapper">
                        <PartyStats 
                            HandleDeletePokemon=@HandleRemoveSelectedPokemonFromParty 
                            HandleViewPokemonInfo=@HandleGetPokemonAndSwitchTab 
                            PartyPokemon=@(RoomState.Value.SelectedCards.Any() ? RoomState.Value.PokemonParty.Cards.Where(x => RoomState.Value.SelectedCards.Contains(x.Key)).Select(y => y.Value) : RoomState.Value.PokemonParty.Cards.Values)
                            AnyPokemonSelected=@RoomState.Value.SelectedCards.Any()
                        />
                    </div>
                    <div class="pokemon-party-wrapper">
                        @if (RoomState.Value.PokemonParty.Cards.Any())
                        {
                            @foreach(var partyCard in RoomState.Value.PokemonParty.Cards.OrderBy(c => c.Key))
                            {
                                <div class="pokemon-card @(RoomState.Value.SelectedCards.Contains(partyCard.Key) ? "card-selected" : string.Empty)" 
                                        draggable="true"
                                        ondragover="event.preventDefault();"
                                        @ondrop="() => HandleDrop(partyCard.Key)"
                                        @ondragstart="() => HandleDragStart(partyCard.Key)"
                                        @ondragenter="() => HandleDragEnter(partyCard.Key)"
                                        @ondragleave="() => HandleDragLeave()"
                                        @onclick="() => HandleOnCardClick(partyCard.Key)"
                                        @onmousewheel="() => HandleRemoveCardFromParty(partyCard.Key)"
                                >
                                    <div class="pokemon-card-flex-wrapper">
                                        <div class="party-card-icons">
                                            <div class="party-card-gender-icon-wrapper">
                                                @switch (partyCard.Value.Gender)
                                                {
                                                    case "male":
                                                        <i class="bi bi-gender-male party-card-gender-icon"></i>
                                                        break;
                                                    case "female":
                                                        <i class="bi bi-gender-female party-card-gender-icon"></i>
                                                        break;
                                                    case "genderless":
                                                        <i class="bi bi-gender-ambiguous party-card-gender-icon"></i>
                                                        break;
                                                }
                                            </div>
                                            <div class="party-card-name-wrapper">
                                                <h1 class="party-card-name">@partyCard.Value.Name.ToDisplayName()</h1>
                                            </div>
                                            <div class="party-card-types-wrapper">
                                                <TypeIcons IconSize=30 PokemonTypes=@partyCard.Value.Types />
                                            </div>
                                        </div>
                                        <div class="party-card-img-wrapper">
                                            <img src=@partyCard.Value.ImageURI class="party-card-img"/>
                                        </div>
                                        <div class="party-card-stats">
                                            @foreach(var stat in partyCard.Value.Stats)
                                            {
                                                <div class="party-card-stat-wrapper @(
                                                        partyCard.Value.Stats.Select (x => x.Base).Max() == stat.Base ? "party-card-stats-top-stat" : 
                                                        partyCard.Value.Stats.Select (x => x.Base).Min() == stat.Base ? "party-card-stats-bottom-stat" : string.Empty
                                                    )">
                                                    <div class="party-card-stat-label">@stat.Name.ToDisplayName()</div>  
                                                    <div class="party-card-stat-value">@stat.Base</div>  
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-party-message">
                                <h1>There are no pokemon in your party!</h1>
                                <h1>Swap to the Pokemon Search Tab to add some!</h1>
                            </div>
                        }
                        </div>  
                }
            </div>
        </div>
        <div class="chat-wrapper">
            <div class="chat-header-wrapper">
                <h2>Chat</h2>
            </div>
            <div class="chat-window">
                @for (int i = RoomState.Value.Chat.Messages.Count - 1; i >= 0; i--)
                {
                    <div class="message-wrapper @(
                        UserState.Value?.User.Id == RoomState.Value.Chat.Messages[i].User.Id ? "message-wrapper-sent" : 
                        RoomState.Value.Chat.Messages[i].User.Id != -1 ? "message-wrapper-incoming" : 
                        string.Empty)"
                    >
                        @if (i == 0 || RoomState.Value.Chat.Messages[i - 1].User.Id != RoomState.Value.Chat.Messages[i].User.Id)
                        {
                            <div class="message-sender">
                                @RoomState.Value.Chat.Messages[i].User.Username
                            </div>
                        }
                        <div class="message @(
                            UserState.Value?.User.Id == RoomState.Value.Chat.Messages[i].User.Id ? "message-sent" : 
                            RoomState.Value.Chat.Messages[i].User.Id != -1 ? "message-incoming" : 
                            string.Empty)"
                    >
                            @RoomState.Value.Chat.Messages[i].MessageText
                        </div>
                    </div>
                }
            </div>
            <form @onsubmit="HandleSendMessage" class="message-send-form">
                <input type="text" @bind-value="messageText" class="send-message-box" placeholder="Send Message..."></input >
                <button type="submit" class="send-message-button">Send</button>
            </form>
        </div>
    </div>
</div>
}



