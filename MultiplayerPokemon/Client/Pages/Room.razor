@using Microsoft.AspNetCore.Authorization
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@attribute [Authorize]

@if (RoomState.Value is not null)
{
<div class="full-room-wrapper">
    <div class="main-room-wrapper">
        <div class="pokemon-header-body-wrapper">
            <div class="room-header-wrapper">
                <div class="header-items-wrapper">
                    <div class="room-title-wrapper">
                        <h1 class="roomname-display-text">@RoomState.Value.RoomName</h1>
                        <h4 class="username-display-text">Connected As: @UserState.Value?.User.Username</h4>
                    </div>
                    <div class="header-tabs">
                        <div class="header-item @(roomTabToggle ? "selected-header-item" : string.Empty)"
                                @onclick=(ToggleToSearch)>
                            <h3>Pokemon Search</h3>
                        </div>
                        <div class="header-item @(!roomTabToggle ? "selected-header-item" : string.Empty)"
                            @onclick=(ToggleToParty)>
                            <h3>Party</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pokemon-wrapper">
                @if (roomTabToggle)
                {
                    <div class="pokemon-search-wrapper">
                        <div class="pokemon-search-form" @onsubmit="() => HandleGetPokemon()">
                            <BlazoredTypeahead 
                                SearchMethod="SearchPokemon" 
                                TValue="string" 
                                TItem="string" 
                                Value="pokemonId" 
                                ValueChanged="HandleGetPokemon" 
                                ValueExpression="@(() => pokemonId)" 
                                placeholder="Search by name..."
                            >
                                <SelectedTemplate>
                                    <div class="typeahead-search-wrapper">
                                        @context
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class="typeahead-result-wrapper">
                                        @context
                                    </div>
                                </ResultTemplate>
                                <NotFoundTemplate>
                                    <div class="typeahead-result-wrapper">
                                        No Pokemon Found!
                                    </div>
                                </NotFoundTemplate>
                            </BlazoredTypeahead>
                            @if (searchedPokemon is not null && searchedPokemon.Id < 10000)
                            {
                                <button type="button" class="submit-button-active">Add To Party</button>
                            }
                            else
                            {
                                <button type="button" class="submit-button">Add To Party</button>
                            }
                            </div>
                        @if (searchedPokemon is not null)
                        {
                            <PokemonData PokemonModel="@searchedPokemon" GetPokemon="@HandleGetPokemon" />
                        }
                    </div>
                }
                else
                {
                    <div class="pokemon-party-wrapper">
                        @foreach(var partyCard in RoomState.Value.PokemonParty.Cards)
                        {
                            <div>@partyCard.Name</div>
                        }
                    </div>  
                }
            </div>
        </div>
        <div class="chat-wrapper">
            <div class="chat-header-wrapper">
                <h2>Chat</h2>
            </div>
            <div class="chat-window">
                @foreach(var message in RoomState.Value.Chat.Messages)
                {
                    <div class="message">
                        @message.MessageText
                    </div>
                }
            </div>
            <form @onsubmit="HandleSendMessage" class="message-send-form">
                <input type="text" @bind-value="messageText" class="send-message-box"></input >
                <button type="submit">Send</button>
            </form>
        </div>
    </div>
</div>
}



